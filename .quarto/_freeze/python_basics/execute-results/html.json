{
  "hash": "50506cf77417c886edaf9cae015e49a7",
  "result": {
    "markdown": "---\ntitle: Getting started with Python + Jupyter Notebook\nauthor: 'Simon Schulte, Johan Velez'\nformat:\n  html:\n    self-contained: true\npandoc:\n  toc: true\n  toc-depth: 3\n  number-sections: true\ndate: last-modified\n---\n\n# Installing Python Packages from your Jupyter Notebook\n\n## Using Conda\n\nIf you have installed Python via the package manager Anaconda, to\ninstall a Python package you can use the following command in a Jupyter\nnotebook:\n\n``` python\nconda install <package-name>\n```\n\nFor example, to install the `numpy` package, you would run the following\ncommand from a Jupyter Notebook code cell:\n\n``` python\nconda install numpy\n```\n\nFor some older versions of Jupyter Notebook running this command causes\nthe following error: `SyntaxError: invalid syntax`.\n\nThen you can try adding a `%`-sign before `conda`:\n\n``` python\n%conda install <package-name>\n```\n\n## Using Pip\n\nIf you have just installed Python (without Anaconda), you can use the\nfollowing command in a Jupyter notebook to install a Python package:\n\n``` python\npip install <package-name>\n```\n\nFor example, to install the `matplotlib` package, you would run:\n\n``` python\npip install matplotlib\n```\n\nFor some older versions of Jupyter Notebook running this command causes\nthe following error: `SyntaxError: invalid syntax`.\n\nThen you can try adding a `%`-sign before `pip`:\n\n``` python\n%pip install <package-name>\n```\n\n# Jupyter Notebook Keyboard Shortcuts\n\nHere are some of the most important keyboard shortcuts for working with\nJupyter notebooks:\n\n-   `Enter`: Enter edit mode\n-   `Shift + Enter`: Run cell and move to the next one\n-   `Ctrl + Enter`: Run cell and stay on the current one\n-   `Esc`: Exit edit mode\n-   `A`: Insert cell above\n-   `B`: Insert cell below\n-   `D, D`: Delete selected cell\n-   `Z`: Undo last cell deletion\n-   `M`: Change cell to markdown\n-   `Y`: Change cell to code\n-   `Ctrl + S`: Save notebook\n-   `Ctrl + Shift + P`: Show command palette\n-   `Shift + Tab`: Show docstring (in edit or command mode)\n\nFor a full list of keyboard shortcuts, you can click on the\n`Keyboard Shortcuts` option in the `Help` menu.\n\n# Python packages we use a lot\n\nThere are two Python packages that we use a lot in our course: Pandas\nand NumPy. While some of their features overlap (e.g. matrix\nmultiplication), others are unique to one of the packages (e.g. matrix\ninversion).\n\n**We recommend to use Pandas whenever possible**, because you keep the\ncolumn-names and indices (=row-names) of your matrix/vector when you\nmanipulate matrices in Pandas `DataFrame` format instead of NumPy's\n`arrays` or `matrix` format.\n\n## Pandas\n\nPandas is a powerful library for data analysis in Python. It provides\ndata structures for efficiently storing and manipulating large,\nheterogeneous datasets, as well as tools for data cleaning, merging,\nreshaping, and analysis.\n\nHere you find a cheatsheet explaining the main functionalities of\nPandas: <https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf>\n\nTo use Pandas in a Jupyter notebook, you can install it using either\nConda or Pip (see the \"Installing Python Packages\" section above), and\nthen import it using the following command:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n## NumPy\n\nNumPy is a fundamental package for scientific computing in Python. It\nprovides powerful tools for working with arrays and matrices, as well as\na large library of mathematical functions for linear algebra, Fourier\nanalysis, and more.\n\nHere you find a cheatsheet explaining the main functionalities of\nPandas:\n<https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf>\n\nTo use NumPy in a Jupyter notebook, you can install it using either\nConda or Pip (see the \"Installing Python Packages\" section above), and\nthen import it using the following command:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\n# Converting between NumPy Arrays/Matrices and Pandas DataFrames\n\n## From NumPy to Pandas\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\n\n# First we create a NumPy array\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\narr\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n```\n:::\n:::\n\n\nNote, a numpy array has not column- or row-names (=index)!\n\nConverting to Pandas DataFrame:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\n\n# create a Pandas DataFrame from a NumPy array\ndf = pd.DataFrame(arr, index=['row1', 'row2', 'row3'], columns=['col1', 'col2', 'col3'])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col1</th>\n      <th>col2</th>\n      <th>col3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>row2</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>row3</th>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n... but: Pandas DataFrame has column- and row-names!\n\n## From Pandas to NumPy\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport pandas as pd\n\n# create a Pandas DataFrame\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6], 'col3': [7, 8, 9]}, index=['row1', 'row2', 'row3'])\n```\n:::\n\n\nConvert to NumPy Array:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# convert a Pandas DataFrame to a NumPy array\narr = df.to_numpy()\narr\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\narray([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])\n```\n:::\n:::\n\n\n# Indexing Data in Python\n\n## Pandas DataFrame\n\n### Using .iloc and .loc\n\n-   `.iloc` is used for index-based selection of rows and columns\n-   `.loc` is used for label-based selection of rows and columns\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport pandas as pd\n\n# create a sample dataframe\ndf = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]}, index=['row1', 'row2', 'row3', 'row4'])\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      col1  col2\nrow1     1     5\nrow2     2     6\nrow3     3     7\nrow4     4     8\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# select a single row using .iloc\nrow = df.iloc[0]\nprint(row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncol1    1\ncol2    5\nName: row1, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# select a single column using .loc\ncol = df.loc[:, 'col1']\nprint(col)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrow1    1\nrow2    2\nrow3    3\nrow4    4\nName: col1, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# select a subset of rows and columns using .iloc\nsubset = df.iloc[0:2, 0:2]\nprint(subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      col1  col2\nrow1     1     5\nrow2     2     6\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# select a subset of rows and columns using .loc\nsubset = df.loc[['row1', 'row2'], ['col1', 'col2']]\nprint(subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      col1  col2\nrow1     1     5\nrow2     2     6\n```\n:::\n:::\n\n\n## NumPy Array\n\n-   Indexing in NumPy arrays can be done using integer arrays, boolean\n    arrays, or slices\n-   Slicing is used to select a range of elements in the array\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nimport numpy as np\n\n# create a sample numpy array\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# select the first row using integer indexing\nrow = arr[0]\nprint(row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3]\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# select the first column using integer indexing\ncol = arr[:, 0]\nprint(col)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 4 7]\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# select a subset of the array using slices\nsubset = arr[0:2, 0:2]\nprint(subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2]\n [4 5]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# select elements based on a boolean condition\nbool_arr = arr > 5\nsubset = arr[bool_arr]\nprint(subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[6 7 8 9]\n```\n:::\n:::\n\n\n<!-- # Plotting in Python -->\n\n<!-- Python provides a variety of powerful libraries for creating -->\n<!-- high-quality visualizations. Here are some commonly used libraries for -->\n<!-- plotting in Python: -->\n\n<!-- ## Matplotlib -->\n\n<!-- Matplotlib is a comprehensive library for creating static, animated, and -->\n<!-- interactive visualizations in Python. It provides a wide range of plot -->\n<!-- types, including line plots, scatter plots, bar plots, histograms, and -->\n<!-- more. Matplotlib is highly customizable, with fine-grained control over -->\n<!-- plot elements such as colors, markers, labels, and annotations. -->\n\n<!-- ### Example -->\n\n<!-- ```{python} -->\n<!-- import matplotlib.pyplot as plt -->\n<!-- import numpy as np -->\n<!-- import pandas as pd -->\n\n<!-- # Generate data and create a DataFrame -->\n<!-- df = pd.DataFrame({'x': np.linspace(0, 10, 100), 'y': np.sin(np.linspace(0, 10, 100))}) -->\n\n<!-- # Create a line plot -->\n<!-- plt.plot(df['x'], df['y']) -->\n\n<!-- # Add labels and a title -->\n<!-- plt.xlabel('x') -->\n<!-- plt.ylabel('y') -->\n<!-- plt.title('A Simple Plot') -->\n\n<!-- # Display the plot -->\n<!-- plt.show() -->\n<!-- ``` -->\n\n<!-- ## Seaborn -->\n\n<!-- Seaborn is a library for creating statistical visualizations in Python. -->\n<!-- It provides a variety of plot types, including scatter plots, line -->\n<!-- plots, bar plots, histograms, kernel density plots, and more. Seaborn is -->\n<!-- built on top of Matplotlib and provides a simpler interface for creating -->\n<!-- common statistical plots. -->\n\n<!-- ### Example -->\n\n<!-- ```{python} -->\n<!-- import seaborn as sns -->\n<!-- import numpy as np -->\n<!-- import pandas as pd -->\n<!-- import matplotlib.pyplot as plt -->\n\n<!-- # Generate data and create a DataFrame -->\n<!-- df = pd.DataFrame({'x': np.random.normal(size=100), 'y': 2 * np.random.normal(size=100) + np.random.normal(size=100)}) -->\n\n<!-- # Create a scatter plot with a regression line -->\n<!-- sns.regplot(data=df, x='x', y='y') -->\n\n<!-- # Display the plot -->\n<!-- plt.show() -->\n<!-- ``` -->\n\n<!-- ## Plotly -->\n\n<!-- Plotly is a library for creating interactive visualizations in Python. -->\n<!-- It provides a wide range of plot types, including scatter plots, line -->\n<!-- plots, bar plots, histograms, and more. Plotly is highly customizable, -->\n<!-- with fine-grained control over plot elements such as colors, markers, -->\n<!-- labels, and annotations. It also provides advanced features such as -->\n<!-- animations and interactivity. -->\n\n<!-- ### Example -->\n\n<!-- ```{python} -->\n<!-- import plotly.express as px -->\n<!-- import numpy as np -->\n<!-- import pandas as pd -->\n\n<!-- # Generate data and create a DataFrame -->\n<!-- df = pd.DataFrame({'x': np.random.normal(size=100), 'y': 2 * np.random.normal(size=100) + np.random.normal(size=100)}) -->\n\n<!-- # Create a scatter plot with a regression line -->\n<!-- fig = px.scatter(data_frame=df, x='x', y='y', trendline='ols') -->\n\n<!-- # Display the plot -->\n<!-- fig.show() -->\n<!-- ``` -->\n\n<!-- ## ggplot and plotnine -->\n\n<!-- ggplot and plotnine are libraries for creating graphics based on the -->\n<!-- grammar of graphics, a system for describing and constructing -->\n<!-- statistical graphics. They provide a powerful set of tools for creating -->\n<!-- complex, layered visualizations with fine-grained control over plot -->\n<!-- elements. ggplot is a library for R, while plotnine is a Python -->\n<!-- implementation of the same system. -->\n\n<!-- ### Example -->\n\n<!-- ```{python} -->\n<!-- from plotnine import * -->\n<!-- import numpy as np -->\n<!-- import pandas as pd -->\n\n<!-- # Generate data and create a DataFrame -->\n<!-- df = pd.DataFrame({'x': np.random.normal(size=100), 'y': 2 * np.random.normal(size=100) + np.random.normal(size=100)}) -->\n\n<!-- # Create a line plot with color and labels -->\n<!-- ( -->\n<!--   ggplot(data=df, mapping=aes(x='x', y='y')) +  -->\n<!--   geom_point(color='blue') -->\n<!--   ) -->\n<!-- ``` -->\n\n",
    "supporting": [
      "python_basics_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}